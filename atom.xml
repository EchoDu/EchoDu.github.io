<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-23T02:28:41.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Du</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>华为机试HJ15</title>
    <link href="http://example.com/2021/10/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ15/"/>
    <id>http://example.com/2021/10/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ15/</id>
    <published>2021-10-23T02:12:47.000Z</published>
    <updated>2021-10-23T02:28:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="求int型数据在内存中存储时1的个数"><a href="#求int型数据在内存中存储时1的个数" class="headerlink" title="求int型数据在内存中存储时1的个数"></a>求int型数据在内存中存储时1的个数</h3><p>输入一个int型正整数，计算出该数在内存中存储时1的个数。</p><p>输入：例：5</p><p>输出：2</p><hr><p>思路：JavaScript的数字有专门的方法<code>Number.prototype.toString()</code>，用<code>num.toString(radix)</code>得到数字对象的字符串表示形式，radix指定数字到字符串的转换基数（2~36）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var num = parseInt(readline());</span><br><span class="line">function countOne(num)&#123;</span><br><span class="line">    var str = num.toString(2);</span><br><span class="line">    var count = 0;</span><br><span class="line">    for(i in str)&#123;</span><br><span class="line">        if(parseInt(str[i]) === 1)&#123;</span><br><span class="line">            ++count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return count;</span><br><span class="line">&#125;</span><br><span class="line">console.log(countOne(num));</span><br></pre></td></tr></table></figure><p>通过：运行时间12ms（超过44.63%用JavaScript_V8提交的代码），占用内存5152KB（超过19.86%用JavaScript_V8提交的代码）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;求int型数据在内存中存储时1的个数&quot;&gt;&lt;a href=&quot;#求int型数据在内存中存储时1的个数&quot; class=&quot;headerlink&quot; title=&quot;求int型数据在内存中存储时1的个数&quot;&gt;&lt;/a&gt;求int型数据在内存中存储时1的个数&lt;/h3&gt;&lt;p&gt;输入一个in</summary>
      
    
    
    
    <category term="面试刷题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="华为机试" scheme="http://example.com/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>华为机试HJ14</title>
    <link href="http://example.com/2021/10/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ14/"/>
    <id>http://example.com/2021/10/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ14/</id>
    <published>2021-10-22T13:21:08.000Z</published>
    <updated>2021-10-22T14:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h3><p>给定n个字符串，按字典序排列。</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">cap</span><br><span class="line">to</span><br><span class="line">cat</span><br><span class="line">card</span><br><span class="line">two</span><br><span class="line">too</span><br><span class="line">up</span><br><span class="line">boat</span><br><span class="line">boot</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">boat</span><br><span class="line">boot</span><br><span class="line">cap</span><br><span class="line">card</span><br><span class="line">cat</span><br><span class="line">to</span><br><span class="line">too</span><br><span class="line">two</span><br><span class="line">up</span><br></pre></td></tr></table></figure><hr><p>思路：把每个单词放到数组里，用数组的<code>sort</code>方法排序，JavaScript的<code>sort</code>方法默认就是用字典序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var line;</span><br><span class="line">var arr = [];</span><br><span class="line">var count = parseInt(readline());</span><br><span class="line">while(line = readline())&#123;</span><br><span class="line">    arr.push(line);</span><br><span class="line">&#125;</span><br><span class="line">arr.sort();</span><br><span class="line">for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    console.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过：运行时间17ms（超过30.33%用JavaScript_V8提交的代码），占用内存6020KB（超过39.16%用JavaScript_V8提交的代码）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;字符串排序&quot;&gt;&lt;a href=&quot;#字符串排序&quot; class=&quot;headerlink&quot; title=&quot;字符串排序&quot;&gt;&lt;/a&gt;字符串排序&lt;/h3&gt;&lt;p&gt;给定n个字符串，按字典序排列。&lt;/p&gt;
&lt;p&gt;输入：&lt;/p&gt;
&lt;figure class=&quot;highlight pl</summary>
      
    
    
    
    <category term="面试刷题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="华为机试" scheme="http://example.com/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>华为机试HJ13</title>
    <link href="http://example.com/2021/10/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ13/"/>
    <id>http://example.com/2021/10/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ13/</id>
    <published>2021-10-22T13:05:58.000Z</published>
    <updated>2021-10-22T13:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="句子逆序"><a href="#句子逆序" class="headerlink" title="句子逆序"></a>句子逆序</h3><p>将一个英语句子以单词为单位逆序排放。单词之间用一个空格隔开，句子中除了英文字母外不包含其他字符。</p><p>输入：I am a boy</p><p>输出：boy a am I</p><hr><p>思路：用字符串的<code>split</code>将各个单词放到数组中，用数组的<code>reverse</code>方法逆序，再用数组的<code>join</code>方法将数组的元素用空格连接成一个字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str = readline();</span><br><span class="line">console.log(str.split(&#x27; &#x27;).reverse().join(&#x27; &#x27;));</span><br></pre></td></tr></table></figure><p>通过：运行时间11ms（超过64.97% 用JavaScript_V8提交的代码），占用内存5132KB（超过61.44%用JavaScript_V8提交的代码）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;句子逆序&quot;&gt;&lt;a href=&quot;#句子逆序&quot; class=&quot;headerlink&quot; title=&quot;句子逆序&quot;&gt;&lt;/a&gt;句子逆序&lt;/h3&gt;&lt;p&gt;将一个英语句子以单词为单位逆序排放。单词之间用一个空格隔开，句子中除了英文字母外不包含其他字符。&lt;/p&gt;
&lt;p&gt;输入：I a</summary>
      
    
    
    
    <category term="面试刷题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="华为机试" scheme="http://example.com/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>华为机试HJ12</title>
    <link href="http://example.com/2021/10/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ12/"/>
    <id>http://example.com/2021/10/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ12/</id>
    <published>2021-10-22T12:15:30.000Z</published>
    <updated>2021-10-22T12:58:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h3><p>接受一个只含小写字母的字符串，输出反转后的字符串</p><p>输入：abcd</p><p>输出：dcba</p><hr><p>思路：还是利用数组的<code>reverse</code>方法，先用字符串的<code>split</code>方法把字符串每个字母放到一个数组中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str = readline();</span><br><span class="line">console.log(str.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;));</span><br></pre></td></tr></table></figure><p>通过：运行时间11ms（超过64.72% 用JavaScript_V8提交的代码），占用内存5312KB（超过16.18%用JavaScript_V8提交的代码）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;字符串反转&quot;&gt;&lt;a href=&quot;#字符串反转&quot; class=&quot;headerlink&quot; title=&quot;字符串反转&quot;&gt;&lt;/a&gt;字符串反转&lt;/h3&gt;&lt;p&gt;接受一个只含小写字母的字符串，输出反转后的字符串&lt;/p&gt;
&lt;p&gt;输入：abcd&lt;/p&gt;
&lt;p&gt;输出：dcba&lt;/p&gt;</summary>
      
    
    
    
    <category term="面试刷题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="华为机试" scheme="http://example.com/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>华为机试HJ11</title>
    <link href="http://example.com/2021/10/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ11/"/>
    <id>http://example.com/2021/10/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ11/</id>
    <published>2021-10-22T12:02:57.000Z</published>
    <updated>2021-10-22T12:12:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数字颠倒"><a href="#数字颠倒" class="headerlink" title="数字颠倒"></a>数字颠倒</h3><p>输入一个整数，将它以字符串的形式逆序输出，数字含有0则输出也有0</p><p>输入：整数，例：1516000</p><p>输出：0006151</p><hr><p>思路：JavaScript数组有专门的<code>reverse</code>方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function reverseNum(str)&#123;</span><br><span class="line">    str = str.split(&#x27;&#x27;).reverse();</span><br><span class="line">    console.log(str.join(&#x27;,&#x27;).replace(/,/g, &#x27;&#x27;));</span><br><span class="line">&#125;</span><br><span class="line">var line;</span><br><span class="line">while(line = readline())&#123;</span><br><span class="line">    reverseNum(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过：运行时间13ms（超过40.46% 用JavaScript_V8提交的代码），占用内存5228KB（超过22.27%用JavaScript_V8提交的代码）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;数字颠倒&quot;&gt;&lt;a href=&quot;#数字颠倒&quot; class=&quot;headerlink&quot; title=&quot;数字颠倒&quot;&gt;&lt;/a&gt;数字颠倒&lt;/h3&gt;&lt;p&gt;输入一个整数，将它以字符串的形式逆序输出，数字含有0则输出也有0&lt;/p&gt;
&lt;p&gt;输入：整数，例：1516000&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="面试刷题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="华为机试" scheme="http://example.com/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>华为机试HJ10</title>
    <link href="http://example.com/2021/10/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ10/"/>
    <id>http://example.com/2021/10/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ10/</id>
    <published>2021-10-22T11:39:55.000Z</published>
    <updated>2021-10-22T11:59:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符个数统计"><a href="#字符个数统计" class="headerlink" title="字符个数统计"></a>字符个数统计</h3><p>一个函数，计算字符串中含有的不同字符的个数。字符在ASCII码0~127范围内。</p><p>输入：一行没有空格的字符串，例：abc</p><p>输出：不同字符个数，3</p><hr><p>思路：利用去重中的一种思路，用数组的<code>indexOf</code>方法或<code>includes</code>方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var arr = readline().split(&#x27;&#x27;);</span><br><span class="line">function computeTypes(arr)&#123;</span><br><span class="line">    var count = [];</span><br><span class="line">    for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">        var cur = arr[i];</span><br><span class="line">        if(!count.includes(cur))&#123;</span><br><span class="line">            count.push(cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return count.length;</span><br><span class="line">&#125;</span><br><span class="line">console.log(computeTypes(arr));</span><br></pre></td></tr></table></figure><p>通过：运行时间8ms（超过93.10%用JavaScript_V8提交的代码），占用内存5040KB（超过77.98%用JavaScript_V8提交的代码）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;字符个数统计&quot;&gt;&lt;a href=&quot;#字符个数统计&quot; class=&quot;headerlink&quot; title=&quot;字符个数统计&quot;&gt;&lt;/a&gt;字符个数统计&lt;/h3&gt;&lt;p&gt;一个函数，计算字符串中含有的不同字符的个数。字符在ASCII码0~127范围内。&lt;/p&gt;
&lt;p&gt;输入：一行没</summary>
      
    
    
    
    <category term="面试刷题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="华为机试" scheme="http://example.com/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>华为机试HJ9</title>
    <link href="http://example.com/2021/10/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ9/"/>
    <id>http://example.com/2021/10/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ9/</id>
    <published>2021-10-22T10:56:54.000Z</published>
    <updated>2021-10-22T11:38:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="提取不重复的整数"><a href="#提取不重复的整数" class="headerlink" title="提取不重复的整数"></a>提取不重复的整数</h3><p>输入一个int型整数，按从右到左的阅读顺序，返回一个不含重复数字的新的整数（保证输入的整数最后一位不是0）</p><p>输入：例：9876673</p><p>输出：37689</p><hr><p>思路：输入readline()得到的都是字符串，用字符串方法<code>split(&#39;&#39;)</code>得到数组[‘9’,’8’,’7’,’6’,’6’,’7’,’3’];<br>用数组方法<code>reverse</code>颠倒顺序，得到数组[‘3’,’7’,’6’,’6’,’7’,’8’,’9’]；<br>用<code>parseInt</code>把数组元素都转换成数字，然后用去重。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var inPut = readline();</span><br><span class="line">function abstractNum(inPut)&#123;</span><br><span class="line">    var arr = inPut.split(&#x27;&#x27;).reverse();</span><br><span class="line">    for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">        arr[i] = parseInt(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    arr = [...new Set(arr)];</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line">var arr = abstractNum(inPut);</span><br><span class="line">console.log(arr.join(&#x27;,&#x27;).replace(/,/g, &#x27;&#x27;));</span><br></pre></td></tr></table></figure><p>通过：运行时间11ms（超过67.14%用JavaScript_V8提交的代码），占用内存5184KB（超过41.66%用JavaScript_V8提交的代码）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;提取不重复的整数&quot;&gt;&lt;a href=&quot;#提取不重复的整数&quot; class=&quot;headerlink&quot; title=&quot;提取不重复的整数&quot;&gt;&lt;/a&gt;提取不重复的整数&lt;/h3&gt;&lt;p&gt;输入一个int型整数，按从右到左的阅读顺序，返回一个不含重复数字的新的整数（保证输入的整数最</summary>
      
    
    
    
    <category term="面试刷题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="华为机试" scheme="http://example.com/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>华为机试HJ8</title>
    <link href="http://example.com/2021/10/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ8/"/>
    <id>http://example.com/2021/10/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ8/</id>
    <published>2021-10-22T07:18:36.000Z</published>
    <updated>2021-10-22T10:49:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="合并表记录"><a href="#合并表记录" class="headerlink" title="合并表记录"></a>合并表记录</h3><p>数据表记录包含表索引和数值（正整数），将相同索引的数值进行求和，然后按key值升序进行输出。</p><p>输入：键值对个数，然后是成对的键值对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">0 1</span><br><span class="line">0 2</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 3</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><hr><p>思路：接收输入到数组arr中，得到arr为[‘4’,’0 1’,’0 2’,’1 2’,’3 4’]；<br>然后根据arr[0]将后面几个输入按键、值的分类分别放入keyArr[0,0,1,3]，valueArr[1,2,2,4]；<br>比较keyArr每个元素（索引值i）与后面的元素（索引值j），若相等让valueArr[i] = valueArr[i] + valueArr[j]，然后删除keyArr[j]；<br>把keyArr和valueArr的值按索引顺序配对，放入一个对象obj中；<br>把obj的键数组按大小排序，然后按排序后的顺序逐个输出键对应的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">var line;</span><br><span class="line">while(line = readline())&#123;</span><br><span class="line">    arr.push(line);</span><br><span class="line">&#125; //得到输入arr[&#x27;4&#x27;,&#x27;0 1&#x27;,&#x27;0 2&#x27;,&#x27;1 2&#x27;,&#x27;3 4&#x27;]</span><br><span class="line">var count = parseInt(arr[0]);</span><br><span class="line">var keyArr = [];</span><br><span class="line">var valueArr = [];</span><br><span class="line">for(let i=1;i&lt;=count;i++)&#123;</span><br><span class="line">//把键值对如&#x27;0 1&#x27;按空格分隔生成数组[&#x27;0&#x27;,&#x27;1&#x27;]，转成数字0、1存入相应数组</span><br><span class="line">    keyArr.push(parseInt(arr[i].split(&#x27; &#x27;)[0]));</span><br><span class="line">    valueArr.push(parseInt(arr[i].split(&#x27; &#x27;)[1]));</span><br><span class="line">&#125;</span><br><span class="line">for(let i=0;i&lt;keyArr.length;i++)&#123;</span><br><span class="line">    for(let j=i+1;j&lt;keyArr.length;j++)&#123;</span><br><span class="line">        if(keyArr[i] === keyArr[j])&#123;</span><br><span class="line">            valueArr[i] = valueArr[i] + valueArr[j];</span><br><span class="line">            keyArr.splice(j,1);</span><br><span class="line">            valueArr.splice(j,1);</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">for(let i=0;i&lt;keyArr.length;i++)&#123;</span><br><span class="line">    obj[keyArr[i]] = valueArr[i];</span><br><span class="line">&#125;</span><br><span class="line">var sortedKey = Object.keys(obj).sort((a,b)=&gt;&#123;return parseInt(a)-parseInt(b);&#125;);</span><br><span class="line">for(let i=0;i&lt;sortedKey.length;i++)&#123;</span><br><span class="line">    console.log(sortedKey[i] + &#x27; &#x27; + obj[sortedKey[i]]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过：运行时间10ms（超过78.42%用JavaScript_V8提交的代码），占用内存5424KB（超过21.69%用JavaScript_V8提交的代码）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;合并表记录&quot;&gt;&lt;a href=&quot;#合并表记录&quot; class=&quot;headerlink&quot; title=&quot;合并表记录&quot;&gt;&lt;/a&gt;合并表记录&lt;/h3&gt;&lt;p&gt;数据表记录包含表索引和数值（正整数），将相同索引的数值进行求和，然后按key值升序进行输出。&lt;/p&gt;
&lt;p&gt;输入：键</summary>
      
    
    
    
    <category term="面试刷题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="华为机试" scheme="http://example.com/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>华为机试HJ7</title>
    <link href="http://example.com/2021/10/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ7/"/>
    <id>http://example.com/2021/10/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ7/</id>
    <published>2021-10-22T03:51:04.000Z</published>
    <updated>2021-10-22T07:17:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="取近似值"><a href="#取近似值" class="headerlink" title="取近似值"></a>取近似值</h3><p>一个程序，接受一个正浮点数值，输出该数值的近似整数值，遵循四舍五入。</p><p>输入：正浮点数值，例：5.5</p><p>输出：近似整数值，6</p><hr><p>思路：JavaScript有好几个转换数字的函数：</p><p>全局函数<code>parseFloat</code>解析参数返回其浮点数；全局函数<code>parseInt</code>解析一个字符串，返回指定基数的十进制整数；<code>Number.prototype.toFixed</code>用定点表示法格式化一个数值；<code>Math.round</code>返回一个数字四舍五入后最接近的整数；<code>Math.floor</code>向下取整；<code>Math.ceil</code>向上取整。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Math.round(parseFloat(readline())));</span><br></pre></td></tr></table></figure><p>通过：运行时间12ms（超过43.52%用JavaScript_V8提交的代码），占用内存5080KB（超过47.49%用JavaScript_V8提交的代码）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;取近似值&quot;&gt;&lt;a href=&quot;#取近似值&quot; class=&quot;headerlink&quot; title=&quot;取近似值&quot;&gt;&lt;/a&gt;取近似值&lt;/h3&gt;&lt;p&gt;一个程序，接受一个正浮点数值，输出该数值的近似整数值，遵循四舍五入。&lt;/p&gt;
&lt;p&gt;输入：正浮点数值，例：5.5&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="面试刷题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="华为机试" scheme="http://example.com/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>华为机试HJ6</title>
    <link href="http://example.com/2021/10/21/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ6/"/>
    <id>http://example.com/2021/10/21/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ6/</id>
    <published>2021-10-21T13:25:04.000Z</published>
    <updated>2021-10-22T07:15:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="质数因子"><a href="#质数因子" class="headerlink" title="质数因子"></a>质数因子</h3><p>输入一个正整数，按从小到到的顺序输出它所有质因子（重复的也要列举），以空格隔开，最后一个数后面也要有空格。</p><p>质因子：能整除给定正整数的质数。</p><p>输入：一个long型整数，例：180</p><p>输出：2 2 3 3 5 </p><hr><p>思路：给定正整数num，给定最小质因子prime=2，先一直除以2，能被2整除则2是其质因子，不能被2整除了++prime即prime=3了，再一直除以3……重复，直到prime² &gt; num；最后如果不为1，则最后剩下的一个质数也是其质因子。因为要求最后一个数后面也有空格，所以在存放质因子的数组最后加个空元素。</p><p>显示数组<code>console.log(arr)</code>是<code>2,2,3,3,5</code>的数组格式，所以用<code>arr.join(&#39;,&#39;)</code>把它转成’2,2,3,3,5’字符串格式，然后用字符串的<code>replace(/,/g, &#39; &#39;)</code>把逗号换成空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var num = parseInt(readline());</span><br><span class="line">var arr = [];</span><br><span class="line">function computePrime(num)&#123;</span><br><span class="line">    var prime = 2;</span><br><span class="line">    var tep = num;</span><br><span class="line">    while(prime &lt; tep &amp;&amp; prime*prime &lt;= tep)&#123;</span><br><span class="line">        while(num % prime === 0)&#123;</span><br><span class="line">            arr.push(prime);</span><br><span class="line">            num = num / prime;</span><br><span class="line">        &#125;</span><br><span class="line">        ++prime;</span><br><span class="line">    &#125;</span><br><span class="line">    if(num !== 1)&#123;</span><br><span class="line">        arr.push(num);</span><br><span class="line">    &#125;</span><br><span class="line">    arr.push(&#x27;,&#x27;);</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line">console.log(computePrime(num).join(&#x27;,&#x27;).replace(/,/g, &#x27; &#x27;));</span><br></pre></td></tr></table></figure><p>通过：运行时间14ms（超过49.17%用JavaScript_V8提交的代码），占用内存5480KB（超过49.17%用JavaScript_V8提交的代码）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;质数因子&quot;&gt;&lt;a href=&quot;#质数因子&quot; class=&quot;headerlink&quot; title=&quot;质数因子&quot;&gt;&lt;/a&gt;质数因子&lt;/h3&gt;&lt;p&gt;输入一个正整数，按从小到到的顺序输出它所有质因子（重复的也要列举），以空格隔开，最后一个数后面也要有空格。&lt;/p&gt;
&lt;p&gt;质</summary>
      
    
    
    
    <category term="面试刷题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="华为机试" scheme="http://example.com/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>华为机试HJ5</title>
    <link href="http://example.com/2021/10/21/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ5/"/>
    <id>http://example.com/2021/10/21/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ5/</id>
    <published>2021-10-21T13:12:42.000Z</published>
    <updated>2021-10-21T13:21:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p>写一个程序，接受一个十六进制数，输出该数的十进制表示</p><p>输入：一个十六进制的数值字符串</p><p>输出：数值的十进制表示</p><hr><p>思路：这个题对JavaScript来说真的很简单，因为有一个专门的<code>parseInt(string, radix)</code>解析一个指定基数的字符串，返回其十进制表示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">var line;</span><br><span class="line">while(line = readline())&#123;</span><br><span class="line">    arr.push(line);</span><br><span class="line">&#125;</span><br><span class="line">for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    console.log(parseInt(arr[i], 16));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过：运行时间14ms（超过25.67%用JavaScript_V8提交的代码），占用内存5000KB（超过81.94%用JavaScript_V8提交的代码）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;进制转换&quot;&gt;&lt;a href=&quot;#进制转换&quot; class=&quot;headerlink&quot; title=&quot;进制转换&quot;&gt;&lt;/a&gt;进制转换&lt;/h3&gt;&lt;p&gt;写一个程序，接受一个十六进制数，输出该数的十进制表示&lt;/p&gt;
&lt;p&gt;输入：一个十六进制的数值字符串&lt;/p&gt;
&lt;p&gt;输出：数值</summary>
      
    
    
    
    <category term="面试刷题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="华为机试" scheme="http://example.com/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>华为机试HJ4</title>
    <link href="http://example.com/2021/10/21/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ4/"/>
    <id>http://example.com/2021/10/21/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ4/</id>
    <published>2021-10-21T11:25:54.000Z</published>
    <updated>2021-10-21T13:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串分隔"><a href="#字符串分隔" class="headerlink" title="字符串分隔"></a>字符串分隔</h3><p>连续输入字符串（长度&lt;100），按长度为8拆分每个字符串并输出。长度不是9整倍数的字符串后面补数字0，空字符串不处理。</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abc</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abc00000</span><br><span class="line">12345678</span><br><span class="line">90000000</span><br></pre></td></tr></table></figure><hr><p>思路：先把输入按空格分成数组里的一个个元素，然后看每个元素的长度，小于8就补0，大于8就拆分（用<code>String.prototype.slice()</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">var line;</span><br><span class="line">while(line = readline())&#123;</span><br><span class="line">    arr.push(line);</span><br><span class="line">&#125;</span><br><span class="line">function divide(arr)&#123;</span><br><span class="line">    var newArr = [];</span><br><span class="line">    for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">        var cur = arr[i];</span><br><span class="line">        var len = cur.length;</span><br><span class="line">        var times = parseInt(len / 8);</span><br><span class="line">        var left = len % 8;</span><br><span class="line">        if(len === 8)&#123;</span><br><span class="line">            newArr.push(cur);</span><br><span class="line">        &#125; else if(len &lt; 8)&#123;</span><br><span class="line">            for(let j=0;j&lt;(8-len);j++)&#123;</span><br><span class="line">                cur += &#x27;0&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">            newArr.push(cur);</span><br><span class="line">        &#125; else if(len &gt; 8)&#123;</span><br><span class="line">            for(let j=0;j&lt;times;j++)&#123;</span><br><span class="line">                newArr.push(cur.slice(j*8, (j+1)*8));</span><br><span class="line">            &#125;</span><br><span class="line">            if(left)&#123;</span><br><span class="line">                var last = cur.slice(8*times);</span><br><span class="line">                for(let j=0;j&lt;(8-left);j++)&#123;</span><br><span class="line">                    last += &#x27;0&#x27;;</span><br><span class="line">                &#125;</span><br><span class="line">                newArr.push(last);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return newArr;</span><br><span class="line">&#125;</span><br><span class="line">var result = divide(arr);</span><br><span class="line">for(let i=0;i&lt;result.length;i++)&#123;</span><br><span class="line">    console.log(result[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过：运行时间12ms（超过51.09%用JavaScript_V8提交的代码），占用内存5192KB（超过30.98%用JavaScript_V8提交的代码）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;字符串分隔&quot;&gt;&lt;a href=&quot;#字符串分隔&quot; class=&quot;headerlink&quot; title=&quot;字符串分隔&quot;&gt;&lt;/a&gt;字符串分隔&lt;/h3&gt;&lt;p&gt;连续输入字符串（长度&amp;lt;100），按长度为8拆分每个字符串并输出。长度不是9整倍数的字符串后面补数字0，空字符串</summary>
      
    
    
    
    <category term="面试刷题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="华为机试" scheme="http://example.com/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>华为机试HJ3</title>
    <link href="http://example.com/2021/10/20/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ3/"/>
    <id>http://example.com/2021/10/20/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ3/</id>
    <published>2021-10-20T10:53:21.000Z</published>
    <updated>2021-10-21T10:46:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="明明的随机数"><a href="#明明的随机数" class="headerlink" title="明明的随机数"></a>明明的随机数</h3><p>N个1到1000之间的随机整数（N ≤ 1000），去掉重复的数字，然后从小到大排序。</p><p>输入：多行数据，每行一个随机整数，例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>第一行的3表示N=3，生成了三个随机数即2，2，1</p><p>输出：多行数据，去重后从小到大每行一个数字</p><hr><p>思路：JavaScript排列很简单，数组有专门用于排列的<code>sort()</code>函数，重点在去重，JavaScript的去重也是面试的高频题目，所以看了一些网上的总结，自己都敲了一遍。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var line;</span><br><span class="line">var arr = [];</span><br><span class="line">var newArr;</span><br><span class="line">var count = 0;</span><br><span class="line">function distinct(arr)&#123;</span><br><span class="line">    var newArr = arr.sort((a,b)=&gt;&#123;</span><br><span class="line">        return a - b;</span><br><span class="line">    &#125;);</span><br><span class="line">    for(let i=0;i&lt;newArr.length;i++)&#123;</span><br><span class="line">        if(newArr[i] === newArr[i+1])&#123;</span><br><span class="line">            newArr.splice(i+1,1);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return newArr;</span><br><span class="line">&#125;</span><br><span class="line">while(line = readline())&#123;</span><br><span class="line">    if(count == 0)&#123;</span><br><span class="line">        count = parseInt(line);</span><br><span class="line">        for(let i = 0; i &lt; count; i++)&#123;</span><br><span class="line">            arr.push(parseInt(readline()))</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        newArr = distinct(arr);</span><br><span class="line">        for(let i=0;i&lt;newArr.length;i++)&#123;</span><br><span class="line">            console.log(newArr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    count = 0;</span><br><span class="line">    arr = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过：运行时间16ms（超过29.78%用JavaScript_V8提交的代码），占用内存5388KB（超过22.77%用JavaScript_V8提交的代码）</p><hr><h4 id="1-用ES6的新数据结构Set"><a href="#1-用ES6的新数据结构Set" class="headerlink" title="1.用ES6的新数据结构Set"></a>1.用ES6的新数据结构Set</h4><p>Set类似于数组，但是成员的值不允许重复，可以用<code>new Set()</code>生成一个Set数据结构。</p><p>可以接收一个数组作参数生成Set数据结构<code>new Set(array)</code>，然后用<code>...</code>三点运算符把Set转换成数组，就能将数组去重了（数组换成字符串也可以用）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function distinct(arr)&#123;</span><br><span class="line">return [...new Set(arr)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function distinct(arr)&#123;</span><br><span class="line">return Array.from(new Set(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Object键值对"><a href="#2-Object键值对" class="headerlink" title="2.Object键值对"></a>2.Object键值对</h4><p>利用对象属性名不能重复的特性，创建一个空对象，把数组每一项放进去当属性名，新的一项放进去时检查，如果该属性名已存在，说明重复了，就把数组里该项删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function distinct(arr)&#123;</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">let cur = arr[i];</span><br><span class="line">if(obj[cur])&#123; //对象中已有该属性</span><br><span class="line">arr[i] = arr[arr.length - 1]; // 开始用的splice函数，结果会造成数组塌陷</span><br><span class="line">arr.length--; // 所以把最后一项给当前项，然后删除最后一项</span><br><span class="line">i--; //该项换了新值，又要检查一次</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">obj[cur] = cur;</span><br><span class="line">&#125;</span><br><span class="line">return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-用indexOf-函数"><a href="#3-用indexOf-函数" class="headerlink" title="3.用indexOf()函数"></a>3.用<code>indexOf()</code>函数</h4><p><code>indexOf()</code>返回在数组中找到的一个给定元素的第一个索引，不存在则返回-1。创建一个新的空数组，检查原数组的每一项在新数组中的索引，索引为-1即不存在，则把该项放入新数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function distinct(arr)&#123;</span><br><span class="line">var newArr = [];</span><br><span class="line">for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">var cur = arr[i];</span><br><span class="line">if(newArr.indexOf(cur) == -1)&#123;</span><br><span class="line">newArr.push(cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>indexOf()</code>可以结合<code>filter</code>使用。</p><p><code>Array.prototype.filter(callback(element, index, array))</code>创建一个新数组，新数组的成员是原数组成员中通过了测试函数callback的部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function distinct(arr)&#123;</span><br><span class="line">return arr.filter(function(ele, index, array)&#123;</span><br><span class="line">return arr.indexOf(ele) === index;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-用sort-方法"><a href="#4-用sort-方法" class="headerlink" title="4.用sort()方法"></a>4.用<code>sort()</code>方法</h4><p>先用<code>sort()</code>给数组排序，然后比较每个数字和后面相邻的成员是否相等，相等则删除后一个元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function distinct(arr)&#123;</span><br><span class="line">var newArr = arr.sort((a,b)=&gt;&#123;</span><br><span class="line">return a-b;</span><br><span class="line">&#125;);</span><br><span class="line">for(let i=0;i&lt;newArr.length;i++)&#123;</span><br><span class="line">if(newArr[i] === newArr[i+1])&#123;</span><br><span class="line">newArr.splice(i+1,1);</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-用includes方法"><a href="#5-用includes方法" class="headerlink" title="5.用includes方法"></a>5.用<code>includes</code>方法</h4><p><code>Array.prototype.includes()</code>判断一个数组是否包含一个指定的值，包含返回true，否则返回false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function distinct(arr)&#123;</span><br><span class="line">var newArr = [];</span><br><span class="line">var len = arr.length;</span><br><span class="line">for(let i=0;i&lt;len;i++)&#123;</span><br><span class="line">var cur = arr[i];</span><br><span class="line">if(!newArr.includes(cur))&#123;</span><br><span class="line">newArr.push(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-双层循环用splice"><a href="#6-双层循环用splice" class="headerlink" title="6.双层循环用splice()"></a>6.双层循环用<code>splice()</code></h4><p>把每个元素跟它后面的所有元素比较，有相等的就删除后面那个重复的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function distinct(arr)&#123;</span><br><span class="line">for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">for(let j=i+1;j&lt;arr.length;j++)&#123;</span><br><span class="line">if(arr[i] === arr[j])&#123;</span><br><span class="line">arr.splice(j,1);</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-用reduce-方法"><a href="#7-用reduce-方法" class="headerlink" title="7.用reduce()方法"></a>7.用<code>reduce()</code>方法</h4><p><code>Array.prototype.reduce(callback(accumulator, currentValue, index, array), initialValue)</code></p><p>对数组中的每个元素执行callback，将其结果汇总为单个返回值。</p><p>结合了方法5的<code>includes</code>方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function distinct(arr)&#123;</span><br><span class="line">return arr.reduce((prev, next)=&gt;&#123;</span><br><span class="line">return prev.includes(next) ? prev : [...prev, next];</span><br><span class="line">&#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;明明的随机数&quot;&gt;&lt;a href=&quot;#明明的随机数&quot; class=&quot;headerlink&quot; title=&quot;明明的随机数&quot;&gt;&lt;/a&gt;明明的随机数&lt;/h3&gt;&lt;p&gt;N个1到1000之间的随机整数（N ≤ 1000），去掉重复的数字，然后从小到大排序。&lt;/p&gt;
&lt;p&gt;输入：</summary>
      
    
    
    
    <category term="面试刷题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="华为机试" scheme="http://example.com/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>华为机试HJ2</title>
    <link href="http://example.com/2021/10/20/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ2/"/>
    <id>http://example.com/2021/10/20/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ2/</id>
    <published>2021-10-20T07:42:18.000Z</published>
    <updated>2021-10-20T08:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算字符个数"><a href="#计算字符个数" class="headerlink" title="计算字符个数"></a>计算字符个数</h3><p>一个程序，接受一个字符串（字母、数字和空格组成）和一个字母，输出字符串中该字母出现的次数，不区分大小写，长度小于500。</p><p>输入：第一行输入一个字符串，第二行输入一个字母</p><p>输出：字符串中含有该字母的个数</p><hr><p>思路1：直接循环一遍字符串，字符串中有该字母就加1。因为不区分大小写，所以先把字符串和字母都变成大写或小写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var str = readline().toLowerCase();</span><br><span class="line">var letter = readline().toLowerCase();</span><br><span class="line">function computeCount(str, letter)&#123;</span><br><span class="line">    var len = str.length;</span><br><span class="line">    var count = 0;</span><br><span class="line">    for(let i = 0; i &lt; len; i++)&#123;</span><br><span class="line">        if(str[i] === letter)&#123;</span><br><span class="line">            count += 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return count;</span><br><span class="line">&#125;</span><br><span class="line">console.log(computeCount(str, letter));</span><br></pre></td></tr></table></figure><p>通过：运行时间13ms（超过37.75%用JavaScript_V8提交的代码），占用内存5044KB（超过66.35%用JavaScript_V8提交的代码）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;计算字符个数&quot;&gt;&lt;a href=&quot;#计算字符个数&quot; class=&quot;headerlink&quot; title=&quot;计算字符个数&quot;&gt;&lt;/a&gt;计算字符个数&lt;/h3&gt;&lt;p&gt;一个程序，接受一个字符串（字母、数字和空格组成）和一个字母，输出字符串中该字母出现的次数，不区分大小写，长度</summary>
      
    
    
    
    <category term="面试刷题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="华为机试" scheme="http://example.com/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>华为机试HJ1</title>
    <link href="http://example.com/2021/10/20/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ1/"/>
    <id>http://example.com/2021/10/20/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ1/</id>
    <published>2021-10-20T06:24:32.000Z</published>
    <updated>2021-10-20T07:35:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串最后一个单词的长度"><a href="#字符串最后一个单词的长度" class="headerlink" title="字符串最后一个单词的长度"></a>字符串最后一个单词的长度</h3><p>计算字符串最后一个单词的长度，单词以空格隔开，字符串长度小于5000（字符串末尾不以空格为结尾）</p><p>输入：一行字符串，非空，长度小于5000</p><p>输出：一个整数，表示输入字符串最后一个单词的长度</p><hr><p>思路1：把字符串的每个单词转成数组的一个成员，再看最后一个成员的length。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var str = readline();</span><br><span class="line">function checkLen(str)&#123;</span><br><span class="line">var arr = str.split(&#x27; &#x27;);</span><br><span class="line">var arrLen = arr.length;</span><br><span class="line">return arr[arrLen - 1].length;</span><br><span class="line">&#125;</span><br><span class="line">console.log(checkLen(str));</span><br></pre></td></tr></table></figure><p>通过：运行时间12ms（超过47.20%用JavaScript_V8提交的代码），占用内存5128KB（超过22.23%用JavaScript_V8提交的代码）</p><hr><p>思路2：字符串也有length，从最后一个字母开始累加，直到遇到空格就停止，得到最后一个字符串的长度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var str = readline();</span><br><span class="line">var len = str.length; //得到字符串长度</span><br><span class="line">var wordLen = 0; //最后一个单词的长度从0开始</span><br><span class="line">for(let i = len-1; i &gt;= 0; i--)&#123;</span><br><span class="line">    if(str[i] !== &#x27; &#x27;)&#123;</span><br><span class="line">        wordLen += 1; //从最后一个字母开始，不为空格就加1</span><br><span class="line">    &#125; else&#123;</span><br><span class="line">        break; //遇到空格，最后一个单词已结束</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(wordLen);</span><br></pre></td></tr></table></figure><p>通过：运行时间11ms（超过58.78%用JavaScript_V8提交的代码），占用内存5084KB（超过50.26%用JavaScript_V8提交的代码）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;字符串最后一个单词的长度&quot;&gt;&lt;a href=&quot;#字符串最后一个单词的长度&quot; class=&quot;headerlink&quot; title=&quot;字符串最后一个单词的长度&quot;&gt;&lt;/a&gt;字符串最后一个单词的长度&lt;/h3&gt;&lt;p&gt;计算字符串最后一个单词的长度，单词以空格隔开，字符串长度小于</summary>
      
    
    
    
    <category term="面试刷题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="华为机试" scheme="http://example.com/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>华为机试001_输入输出</title>
    <link href="http://example.com/2021/10/19/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95001-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <id>http://example.com/2021/10/19/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95001-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</id>
    <published>2021-10-19T11:55:03.000Z</published>
    <updated>2021-10-19T14:02:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>牛客网上华为机试的界面什么都没有，直接给个题目和输入输出描述，一开始不知道怎么下手，所以在掘金上搜了相关文章，总算是知道怎么做题了。</p><hr><h3 id="JavaScript-V8输入输出"><a href="#JavaScript-V8输入输出" class="headerlink" title="JavaScript V8输入输出"></a>JavaScript V8输入输出</h3><h4 id="单行输入"><a href="#单行输入" class="headerlink" title="单行输入"></a>单行输入</h4><p>V8引擎用<code>readline()</code>接收输入的每一行，一行的字符串不能超过1024个，否则会报错。</p><h4 id="多行输入"><a href="#多行输入" class="headerlink" title="多行输入"></a>多行输入</h4><p>一个<code>readline()</code>接收一行，有几行输入就要写几个<code>readline()</code>，固定行数输入可以用for循环，不固定行数输入可以用while循环。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>输出用<code>print()</code>或<code>console.log()</code>都可以。</p><h3 id="JavaScript-Node"><a href="#JavaScript-Node" class="headerlink" title="JavaScript Node"></a>JavaScript Node</h3><h4 id="单行输入-1"><a href="#单行输入-1" class="headerlink" title="单行输入"></a>单行输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const readline = require(&#x27;readline&#x27;);</span><br><span class="line">const rl = readline.createInterface(&#123;</span><br><span class="line">input: process.stdin,</span><br><span class="line">output: process.stdout</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rl.on(&#x27;line&#x27;, function(data)&#123;</span><br><span class="line">var result = data.split(&#x27; &#x27;); //获取第一行的内容，存为数组</span><br><span class="line">console.log(result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;牛客网上华为机试的界面什么都没有，直接给个题目和输入输出描述，一开始不知道怎么下手，所以在掘金上搜了相关文章，总算是知道怎么做题了。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;JavaScript-V8输入输出&quot;&gt;&lt;a href=&quot;#JavaScript-V8输入输出&quot; class</summary>
      
    
    
    
    <category term="面试刷题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="华为机试" scheme="http://example.com/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Markdown学习记录</title>
    <link href="http://example.com/2021/10/19/Markdown%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2021/10/19/Markdown%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2021-10-19T08:50:37.000Z</published>
    <updated>2021-10-19T12:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown是一种轻量级标记语言，允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown编写的文档后缀为.md或.markdown</p><hr><h1 id="使用-的一级标题"><a href="#使用-的一级标题" class="headerlink" title="使用=的一级标题"></a>使用=的一级标题</h1><h2 id="使用-的二级标题"><a href="#使用-的二级标题" class="headerlink" title="使用-的二级标题"></a>使用-的二级标题</h2><h1 id="使用-的一级标题（总共六级）"><a href="#使用-的一级标题（总共六级）" class="headerlink" title="使用#的一级标题（总共六级）"></a>使用#的一级标题（总共六级）</h1><p>换行：两个以上空格+回车，或者一个空行</p><p><em>用”*“斜体文本</em></p><p><em>用”_“斜体文本</em></p><p><strong>用”**“粗体文本</strong></p><p><strong>用”__“粗体文本</strong></p><p><em><strong>用”___“粗斜体文本</strong></em></p><p>分隔线：</p><p>***</p><hr><p>* * *</p><hr><p>- - -</p><hr><h2 id=""><a href="#" class="headerlink" title="-------"></a>-------</h2><p><del>删除线”~~“</del></p><p><u>下划线用HTML标签u实现</u></p><p>[^脚注用[^文字]实现]</p><p>无序列表用*或+或-：</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><p>有序列表用数字加.：</p><p>1.第一项<br>2.第二项<br>3.第三项</p><p>区块引用”&gt;”：</p><blockquote><p>这句话是引用自……</p></blockquote><p>代码：</p><p>一个函数或片段用反引号包起来：<code>console.log()</code> 函数</p><p>三个反引号包裹一段代码并可以指定语言：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链接：中括号链接名称，小括号链接地址，或者尖括号链接地址</p><p><a class="link"   href="https://www.baidu.com/" >百度地址<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.baidu.com/" >https://www.baidu.com<i class="fas fa-external-link-alt"></i></a></p><p>图片：![alt 属性文本](图片地址 ”可选标题“)</p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="头像 图片"></p><p>表格：用|分隔单元格，用-分隔表头和其他行</p><table><thead><tr><th align="center">表头</th><th align="center">表头</th></tr></thead><tbody><tr><td align="center">单元格</td><td align="center">单元格</td></tr><tr><td align="center">单元格</td><td align="center">单元格</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Markdown是一种轻量级标记语言，允许人们使用易读易写的纯文本格式编写文档。&lt;/p&gt;
&lt;p&gt;Markdown编写的文档后缀为.md或.markdown&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;使用-的一级标题&quot;&gt;&lt;a href=&quot;#使用-的一级标题&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="标记语言" scheme="http://example.com/categories/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="Markdown" scheme="http://example.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
